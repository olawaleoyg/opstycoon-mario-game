name: vpc-ci-dev-create
on:
  push:
    branches:
      - feat/setup-ci
    paths:
      - "iac/terraform/vpc/*"
    #   - "iac/terraform/vpc/dev/**"
env:
  TF_LOG: INFO
  AWS_ACCOUNT_NUMBER: 211125759162
defaults:
  run:
    shell: bash
    working-directory: ./iac/terraform/vpc
permissions:
  contents: read
jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint. New
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::${{env.AWS_ACCOUNT_NUMBER}}:role/github-actions-role
          role-session-name: Session-GitHubActions
      - name: Get AWS Caller Identity
        run: |
          aws sts get-caller-identity --output json
      - name: Login to Amazon ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/t5i1x5v9

      - name: Build, Tag and Push Docker Image
        run: |
          docker build -t demo-image:latest -f Dockerfile .
          docker tag demo-image:latest public.ecr.aws/t5i1x5v9/demo-image:latest
          docker push public.ecr.aws/t5i1x5v9/demo-image:latest

      - name: Push Docker image to ECR
        run: docker push ${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_REGION}.amazonaws.com/demo:latest
      # - name: Setup Terraform with specified version on the runner
      #   uses: hashicorp/setup-terraform@v2
      #   # with:
      #   #   terraform_version: 1.4.6
      # - name: Terraform format
      #   id: fmt
      #   run: terraform fmt -check
      # - name: Terraform init
      #   id: init
      #   run: terraform init
      # - name: Terraform validate
      #   id: validate
      #   run: terraform validate
      # - name: Terraform plan
      #   id: plan
      #   run: terraform plan -var-file=./dev/terraform.tfvars -no-color -input=false
      #   continue-on-error: true
      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
      # # - name: Terraform Apply
      # #   run: terraform apply -var-file=./dev/terraform.tfvars -auto-approve -input=false
